# Copyright 2018, Cristi√°n Donoso.
# This code has a BSD license. See LICENSE.

declare_args() {
  sdl2_include_path = getenv("SDL2_SDK") + "/include"
  sdl2_lib_path = getenv("SDL2_SDK") + "/lib"
  vulkan_include_path = getenv("VULKAN_SDK") + "/include"
  vulkan_lib_path = getenv("VULKAN_SDK") + "/lib"
}

config("sdl2_config") {
  handled = false
  include_dirs = [ "$sdl2_include_path" ]
  if (target_os == "win" && compiler == "msvc") {
    libs = [ "${sdl2_lib_path}/SDL2/SDL2.lib" ]
    handled = true
  } else if (target_os == "mac" && compiler == "clang") {
    # NOTE: SDL2 should be installed as a framework in /Library/Frameworks
    ldflags = [ "-framework", "SDL2" ]
    handled = true
  } else if (target_os == "linux") {
    if (compiler == "clang") {
      libs = [ "-lSDL2" ]
      ldflags = [ "-L${sdl2_lib_path}" ]
      handled = true
    }
  }

  if (!handled) {
    assert(false, "SDL2: Unhandled OS/Compiler combo: $target_os/$compiler")
  }
}

config("vulkan_config") {
  handled = false
  include_dirs = [ "${vulkan_include_path}" ]
  if (target_os == "win" && compiler == "msvc") {
    libs = [ "${vulkan_include_path}/vulkan/vulkan-1.lib" ]
    handled = true
  } else if (target_os == "mac" && compiler == "clang") {
    # IMPORTANT: vulkan for mac requires certain env variables to be set in
    #            order to work correctly. Eg:
    #
    # export VULKAN_SDK="/Users/donosoc/SDKs/vulkansdk-macos-1.1.82.0/macOS"

    # Installable Client Driver interfaces:
    # The ICD are the drivers available to expose the physical devices.
    # This env variable allows the loader to find the ICDs molten provides.
    #   export VK_ICD_FILENAMES="$VULKAN_SDK/etc/vulkan/icd.d/MoltenVK_icd.json"

    # Point the loader to the manifest where the layers are specified.
    # export VK_LAYER_PATH = "$VULKAN_SDK/etc/vulkan/explicit_layers.d"
    libs = [ "${vulkan_lib_path}/libvulkan.dylib" ]
    handled = true
  } else if (target_os == "linux") {
    if (compiler == "clang") {
      libs = [ "-lvulkan" ]
      ldflags = [ "-L${vulkan_lib_path}" ]
      handled = true
    }
  }

  if (!handled) {
    assert(false, "Vulkan: Unhandled OS/Compiler combo: $target_os/$compiler")
  }
}

source_set("vulkan_lib") {
  sources = [
    "vulkan_context.cc",
    "vulkan_context.h",
    "vulkan_utils.cc",
    "vulkan_utils.h",
  ]
  configs += [
    ":sdl2_config",
    ":vulkan_config",
  ]
}

source_set("warhol_lib") {
  sources = [
    "assets.cc",
    "assets.h",
    "camera.cc",
    "camera.h",
    "sdl_context.cc",
    "sdl_context.h",
    "shader.cc",
    "shader.h",
    "texture.cc",
    "texture.h",
    "texture_atlas.cc",
    "texture_atlas.h",
  ]
  configs += [
    ":sdl2_config",
    "//third_party/gl3w:gl3w_config",
  ]
  deps = [
    "//src/math",
    "//src/model",
    "//src/utils",
    "//third_party/gl3w:gl3w",
  ]
}

# Executables -------------------------------------------------------------------

executable("warhol") {
  sources = [
    "main.cc"
  ]
  deps = [
    ":vulkan_lib",
    "//src/utils",
  ]
  configs += [
    ":sdl2_config",
    ":vulkan_config",
  ]
}

executable("sdl2_test") {
  sources = [
    "sdl2_test.cc",
  ]
  configs += [
    ":sdl2_config",
  ]
}

executable("opengl_example") {
  sources = [
    "opengl_example.cc",
  ]
  configs += [
    ":sdl2_config",
    "//third_party/gl3w:gl3w_config",
  ]
  deps = [
    ":warhol_lib",
    "//src/arch:arch_provider",
    "//src/utils",
    "//third_party/gl3w:gl3w",
  ]
}
