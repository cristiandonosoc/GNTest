declare_args() {
  sdl_include_path = getenv("SDL2_SDK") + "/include"
  sdl_lib_path = getenv("SDL2_SDK") + "/lib"
  vulkan_include_path = getenv("VULKAN_SDK") + "/include"
  vulkan_lib_path = getenv("VULKAN_SDK") + "/lib"
}

source_set("utils") {
  sources = [
    "log.cc",
    "log.h",
    "macros.h",
    "status.cc",
    "status.h",
    "string.cc",
    "string.h",
  ]
  deps = [
    "//third_party/stb",
  ]
}

source_set("socket") {
  sources = [
    "socket.cc",
    "socket.h",
  ]
  deps = [
    ":utils",
  ]
}

config("win_socks") {
  libs = [ "Ws2_32.lib" ]
}

executable("server") {
  sources = [
    "server_main.cc",
  ]
  configs += [ ":win_socks" ]
  deps = [
    ":socket",
  ]
}

executable("client") {
  sources = [
    "client_main.cc",
  ]
  configs += [ ":win_socks" ]
  deps = [
    ":socket",
  ]
}

executable("test") {
  sources = [ "test_main.cc" ]
  deps = [
    ":utils",
  ]
}

config("sdl2_config") {
  if (target_os == "win" && compiler == "msvc") {
    include_dirs = [ "../includelnk" ]
    libs = [ "../liblnk/SDL2/SDL2.lib" ]
    ldflags = [ "/SUBSYSTEM:CONSOLE" ]
  } else if (target_os == "mac" && compiler == "clang") {
    # NOTE: SDL2 should be installed as a framework in /Library/Frameworks
    ldflags = [
      "-framework", "SDL2",
    ]
  } else {
    print("TARGET OS:", target_os, "COMPILER:", compiler)
    assert(false, "Unknown OS/Compiler combo")
  }
}

executable("sdl2_test") {
  sources = [ "sdl2_main.cc" ]
  configs += [ ":sdl2_config" ]
}

config("vulkan_config") {
  if (target_os == "win" && compiler == "msvc") {
    include_dirs = [ "../includelnk" ]
    libs  = [ "../liblnk/vulkan/vulkan-1.lib" ]
  } else if (target_os == "mac" && compiler == "clang") {
    # IMPORTANT: vulkan for mac requires certain env variables to be set in
    #            order to work correctly. Eg:
    #
    # export VULKAN_SDK="/Users/donosoc/SDKs/vulkansdk-macos-1.1.82.0/macOS"

    # Installable Client Driver interfaces:
    # The ICD are the drivers available to expose the physical devices.
    # This env variable allows the loader to find the ICDs molten provides.
    #   export VK_ICD_FILENAMES="$VULKAN_SDK/etc/vulkan/icd.d/MoltenVK_icd.json"

#Point the loader to the manifest where the layers are specified.
#export VK_LAYER_PATH = "$VULKAN_SDK/etc/vulkan/explicit_layers.d"
    print("${vulkan_include_path}")
    include_dirs = [
      "$vulkan_include_path",
    ]
    libs = [
      "${vulkan_lib_path}/libvulkan.dylib",
    ]
  } else {
    print("TARGET OS:", target_os, "COMPILER:", compiler)
    assert(false, "Unknown OS/Compiler combo")
  }
}

source_set("vulkan_lib") {
  sources = [
    "vulkan_context.cc",
    "vulkan_context.h",
    "vulkan_utils.cc",
    "vulkan_utils.h",
  ]
  configs += [
    ":vulkan_config",
  ]
}

executable("vulkan_test") {
  sources = [ "vulkan_test.cc" ]
  configs += [ ":vulkan_config", ":sdl2_config" ]
  deps = [
    ":utils",
    ":vulkan_lib",
  ]
}

executable("hello_world") {
  sources = [ "hello_world.cc" ]
}
